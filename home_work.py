'''У нас є список показань заборгованостей з комунальних послуг наприкінці місяця. 
Заборгованості можуть бути від'ємними — у нас переплата, чи додатними, якщо необхідно сплатити за рахунками. 
Напишіть функцію amount_payment, яка приймає на вхід список платежів, підсумовує додатні значення 
та повертає суму платежу наприкінці місяця.'''

# def amount_payment(payment):
#     sum = 0
#     for value in payment:
#         if value > 0:
#             sum += value
#     return sum  
    
# print(amount_payment([1, -3, 4]))

'''При аналізі даних часто виникає необхідність позбавитися екстремальних значень, перш ніж почати працювати 
з даними далі. Напишіть функцію prepare_data, яка видаляє з переданого списку найбільше та найменше значення, 
сортує його в порядку зростання і повертає змінений список як результат.'''
    
# def prepare_data(data):
#     res = sorted(data)
#     res.pop(0)
#     res.pop()

#     return res

# print(prepare_data([4, 1, 3, 5, 2]))

'''Ми розробляємо кулінарний блог. І в рецептах, при написанні списку інгредієнтів, ми розділяємо їх комами, 
а перед останнім ставимо союз "and", як у прикладі нижче:

2 eggs, 1 liter sugar, 1 tsp salt and vinegar

Напишіть функцію format_ingredients, яка прийматиме на вхід список з інгредієнтів 
["2 eggs", "1 liter sugar", "1 tsp salt", "vinegar"] та повертатиме рядок зібраний з його елементів 
в описаний вище спосіб. Ваша функція має вміти обробляти списки будь-якої довжини.'''

# def format_ingredients(items):
#     if len(items) > 2:
#         items_1 = ', '.join(items[: -1])
#         items_2 = ''.join(items[-1])
#         items_f = (f"{items_1} {'and'} {items_2}")
#         return items_f
    
#     elif len(items) == 0:
#         items_f = ''.join(items)
#         return items_f
    
#     else:
#         items = items[0]
#         items_f = ''.join(items)
#         return items_f
    
# print(format_ingredients([]))

'''Сучасна система оцінок в університеті має такий вигляд:

Оцінка	Бали	Оцінка ECTS     Пояснення
1	    0-34	    F	        Unsatisfactorily
2	    35-59	    FX	        Unsatisfactorily
3	    60-66	    E	        Enough
3	    67-74	    D	        Satisfactorily
4	    75-89	    C	        Good
5	    90-95	    В	        Very good
5	    96-100	    A	        Perfectly
Реалізуйте дві функції. Перша буде використовуватись у бухгалтерії при розрахунку стипендії, get_grade приймає ключ у вигляді оцінки ECTS, і має повертати відповідну п'ятибальну оцінку (перший стовпчик таблиці). Друга get_description теж приймає ключ у вигляді оцінки ECTS, але повертатиме пояснення оцінки в текстовому форматі (останній стовпчик таблиці) і буде використана в електронній заліковій книжці студента. На відсутній ключ функції повинні повертати значення None.'''

# def get_grade(key):
#     ects_rating = {'F':1, 'FX':2, 'E':3, 'D':3, 'C':4, 'B':5, 'A':5}
#     return ects_rating.get(key)
    
# def get_description(key):
#     ects_rating = {'F':'Unsatisfactorily', 
#                    'FX':'Unsatisfactorily', 
#                    'E':'Enough', 
#                    'D':'Satisfactorily', 
#                    'C':'Good', 
#                    'B':'Very good', 
#                    'A':'Perfectly'
#                    }
#     return ects_rating.get(key)

# key = 'D'
# print(get_grade(key))
# print(get_description(key))

'''Як ми знаємо, ключ у словнику має бути унікальним, тоді як значення його ні. Реалізуйте функцію lookup_key для пошуку всіх ключів за значенням у словнику. Першим параметром у функцію ми передаємо словник, а другим — значення, що хочемо знайти. Таким чином, результат може бути як список ключів, так і порожній список, якщо ми нічого не знайдемо.'''

# def lookup_key(data, value):
#     my_list =[]
#     for key, val in data.items():
#         if val == value:
#             my_list.append(key)
#     return my_list

'''У нас є список показників студентів групи – це список з отриманими балами з тестування. Необхідно поділити список на дві частини. Напишіть функцію split_list, яка приймає список (цілі числа), знаходить середнє значення бала у списку та ділить його на два списки. У перший потрапляють значення менше середнього, включаючи середнє значення, тоді як у другий — строго більше від середнього. Функція повертає кортеж цих двох списків. Для порожнього списку повертаємо два порожні списки.'''

# def split_list(grade):
#     if len(grade) == 0:
#         return [], []
#     else:    
#         avg = sum(grade) / len(grade)
#         list_1 = []  
#         list_2 = []
#         for value in grade:
#             if value <= avg:
#                 list_1.append(value)
#             else:
#                 list_2.append(value)
#         list = [list_1, list_2]
#         return tuple(list)

# print(split_list([1, 12, 3, 24, 5]))

'''Є чотирикутна схема польотів дронів з координатами (0, 1, 2, 3). У нас є словник points, ключі якого — кортежі, точки польоту між координатами чотирикутника, вигляду (1, 2). Значення словника — це відстані між вказаними точками.
Приклад:
points = {(0, 1): 2, (0, 2): 3.8, (0, 3): 2.7, (1, 2): 2.5, (1, 3): 4.1, (2, 3): 3.9}
Напишіть функцію calculate_distance, яка на вхід приймає список координат чотирикутника зі словника виду [0, 1, 3, 2, 0]. Функція повинна підрахувати, використовуючи вказаний словник, яку загальну відстань пролетить дрон, рухаючись між точками польоту.
Примітки:
коли беремо у словника points значення, у ключі кортежі завжди має бути першою координата з меншим значенням — (2, 3), але не (3, 2);
для порожнього списку та списку з однією координатою функція calculate_distance має повертати 0.'''

points = {
    (0, 1): 2,
    (0, 2): 3.8,
    (0, 3): 2.7,
    (1, 2): 2.5,
    (1, 3): 4.1,
    (2, 3): 3.9,
}


def calculate_distance(coordinates):
        


    






